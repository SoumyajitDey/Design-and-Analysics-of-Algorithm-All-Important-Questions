7.IMPLEMENTATION OF QUICK SORT:
#include<stdio.h>
void swap(int* x, int* y)
{
int t = *x;
*x = *y;
*y = t;
}
int partition(int arr[], int low, int high)
{
int pivot = arr[high]; // pivot
int i = (low - 1);
int j;
for (j = low; j <= high- 1; j++)
{
if (arr[j] < pivot)
{
i++;
swap(&arr[i], &arr[j]);
}
}
swap(&arr[i + 1], &arr[high]);
return (i + 1);
}
/* The main function that implements QuickSort
arr[] --> Array to be sorted,
low --> Starting index,
high --> Ending index */

void quick_sort(int arr[], int low, int high)
{
if (low < high)
{
int pi = partition(arr, low, high);
quick_sort(arr, low, pi - 1);
quick_sort(arr, pi + 1, high);
}
}
void main()
{
int arr[50];
int i, key,pos,n;
printf("enter array size:");
scanf("%d", &n);
printf("enter array:\n");
for(i=0;i<n;i++)
{
scanf("%d",&arr[i]);
}
quick_sort(arr, 0, n-1);
printf("Sorted array: \n");
for(i=0;i<n;i++)
{
printf("%d, ",arr[i]);
}
}