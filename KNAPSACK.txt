16: IMPLEMENTATION OF 0-1 KNAPSACK PROBLEM:
#include<stdio.h>
int max(int a, int b) { return (a > b)? a : b; }
int knapSack(int W, int wt[], int val[], int n)
{
int i, w,k;
int K[n+1][W+1],a[n];
for(i=0;i<n;i++)
a[i]=0;
for (i = 0; i <= n; i++)
{
for (w = 0; w <= W; w++)
{
if (i==0 || w==0)
K[i][w] = 0;
else if (wt[i-1] <= w)
K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]);
else
K[i][w] = K[i-1][w];
}
}

i=n; k=W;

while(k>=0 && i>=0)
{
if((K[i][k]!=K[i-1][k]))
{
i=i-1 ; k= k-wt[i];
a[i]=1;
}
else
{
i=i-1;
}

}
printf("\n vector for selected item is:");
for(i=0;i<n;i++)
printf("%d ",a[i]);

return K[n][W];
}
int main()
{
int i, n, val[20], wt[20], W,profit;
printf("Enter number of items:");
scanf("%d", &n);
printf("Enter value and weight of items:\n");
for(i = 0;i < n; ++i){
scanf("%d%d", &val[i], &wt[i]);
}
printf("Enter size of knapsack:");
scanf("%d", &W);
profit=knapSack(W, wt, val, n);
printf("\n maximum profit is: %d", profit );
return 0;
}